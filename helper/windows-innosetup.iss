; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Chrome Extension Auto-update Disabler Helper App"
#define MyAppVersion "0.0.1"
#define MyAppPublisher "Kevin P. Kleinfelter"
#define MyAppURL "http://kleinfelter.com/update-disabler/"
#define MyAppExeName "helper.exe"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{88A179B0-2821-497C-B551-B57B3822E327}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={userpf}\Chrome Extension Auto-update Disabler
DefaultGroupName=Chrome Extension Auto-update Disabler
DisableProgramGroupPage=yes
DisableDirPage=yes
LicenseFile=K:\Sync\Code\chrome_extensions\autoupdate_disabler_0.0.3\helper\license
OutputBaseFilename=setup
Compression=lzma
SolidCompression=yes
PrivilegesRequired=lowest

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Files]
Source: "K:\Sync\Code\chrome_extensions\autoupdate_disabler_0.0.3\helper\dist\helper.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "K:\Sync\Code\chrome_extensions\autoupdate_disabler_0.0.3\helper\com.kleinfelter.autoupdate_disabler.json"; DestDir: "{app}"; Flags: ignoreversion; AfterInstall: EditManifestFile('{app}\com.kleinfelter.autoupdate_disabler.json')
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKCU; Subkey: "SOFTWARE\Google\Chrome\NativeMessagingHosts\com.kleinfelter.autoupdate_disabler"; Flags: uninsdeletekey; ValueType: string; ValueName: ""; ValueData: "{app}\com.kleinfelter.autoupdate_disabler.json"

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Code]
procedure EditManifestFile(ManifestName: String);
var
  ManifestFileName: String;
  ExeFileName: String;
  s: String;
begin
  ManifestFileName := ExpandConstant(CurrentFileName);
  ExeFileName := ExpandConstant('{app}\helper.exe');
  if LoadStringFromFile(ManifestFileName, s) then
  begin
    StringChangeEx(ExeFileName, '\', '\\', True);
    StringChangeEx(s, 'PATH_TOKEN', ExeFileName, True);
  end
  SaveStringToFile(ManifestFileName, s, False);
end;
